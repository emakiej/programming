/**
*   Excludes 2n&5n numbers which reliefes algorithm of useless loops.
*   Algorithm is 60% lighter now.
*   Excludes dividers larger than root of dividen
*   A divider quantity of diviers grows very slow - 2 dividers for dividend d=17 
* throughout d<1000 (as squarter root of divided) for d=10 000 and so on.
*   For more atomic reliefes we'll need some advanced mathematical theories
* being included since certain quote for each one - which means a new loop 
* graduating a previous score for every implemented theory.
*   IMO adding loops mean less boolean checks as at least the first loop
*   Excuse me for a bugs as i'm a little bit disfocused after a long weekend
* and have some problem with mhy Opensuse 42.2 - i've just found interface
* not drawing a essential menu bar (  [], _, x  buttons ).
*   P.S.
*   Untill i'm a starting programmer i didn't use LinkedList and included 
* a console arguments without real knowledge about it. Sorry but tomorrow i will
* not have a time for research.
* In periond of week i will make it runs.
* I hope to improve Your (readers) skills.
*
* Cheers fellows!(%%%)
MichaÅ‚ BUjakowski
*/


static class goPrimes{

  public static void main(String[]args){
    try{
    run(new Integer(args[0]));
    }catch(NumberFormatException nfe){System.out.print("Use one argument, being a number, please.");
    
  }
  static void run(int max){
    max-=max%10==6?5:max%10==5?4:max%2==0?1:2;   //excluding 5n and even numbers
    int []out=new int[(int)max/9];
    out[0]=2;out[1]=3;out[2]=5;
    
    for(int q=7,d=1,next=3;q<max;
    q+=q%10==3?4:2 //dynamic exclusion of 5n|2n numbers
    ){
      while(out[d]*out[d]<q&&q%out[d]>0)d+=2;
      if(q%out[d]>0)out[next++]=q;
      }
      System.out.print(Arrays.toString(out));
      
      goPrimes(){mai(String[] args);}
  }
}
